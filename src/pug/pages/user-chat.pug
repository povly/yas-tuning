extends ../layout/base

//- Include mixins
include ../mixins/picture
include ../mixins/video
include ../mixins/iframe

block variables
  - var title = 'user chat';
  - var description = '';
  - var pageCss = ['index', 'user'];  // Страничные стили /pages/index.scss
  - var pageJs = ['pages/user', 'pages/superadmin/chat'];


block content
  include ../blocks/user/tickets

block footer
  include ../components/footer/footer
  include ../components/modal/profile-exit
  script.
    document.addEventListener('DOMContentLoaded', function() {
      document.addEventListener('htmx:beforeSwap', function(evt) {
        if (evt.detail.target.id === 'order-modal-container') {
          document.body.style.overflow = 'hidden';
        }
      });

      function initEventFiles(){
          // Используем делегирование событий или переподписываемся каждый раз
          const fileInputs = document.querySelectorAll('#user__chat input[type="file"]');
          fileInputs.forEach(input => {
              // Удалим предыдущие обработчики, чтобы избежать дублирования
              input.removeEventListener('change', handleFileInputChange);
              input.addEventListener('change', handleFileInputChange);
          });
      }

      function handleFileInputChange() {
          if (this.files.length > 0) {
              const form = this.closest('form');
              // Инициализируем или обновляем наш пользовательский список файлов
              this._selectedFiles = this._selectedFiles ? [...this._selectedFiles, ...Array.from(this.files)] : Array.from(this.files);
              showPreview(form, this._selectedFiles); // Передаем весь актуальный список
              // Обновляем input.files, чтобы он содержал все выбранные файлы
              // (На случай, если showPreview вызван не из handleFileInputChange, например, из DnD)
              updateInputFiles(this, this._selectedFiles);
          }
      }

      initEventFiles();

      let ws;
      function initChat() {
          ws = new WebSocket("ws://localhost:8080");
          ws.onmessage = receiveChatMessage;
      }
      initChat();
      function sendMessage(form) {
        if (!ws) { alert('Socket not ready'); return false; }
        let fileInput = form.querySelector('input[type="file"]');
        let files = Array.from(fileInput.files);
        let text = form.message.value.trim();

        // Создаем одно сообщение со всем содержимым
        if (text || files.length > 0) {
          createCombinedMessage(form, text, files);
        }

        form.reset();
        clearPreview(form);
        return false;
      }

      function createCombinedMessage(form, text, files) {
        let messageContent = '';

        // Добавляем текст, если есть
        if (text) {
          messageContent += `<p>${text}</p>`;
        }

        // Если нет файлов, создаем сообщение сразу
        if (files.length === 0) {
          createMessage(messageContent, getCurrentTime(), '_read', '_right');
          return;
        }

        // Обрабатываем файлы
        let imageFiles = files.filter(file => file.type.startsWith('image/'));
        let otherFiles = files.filter(file => !file.type.startsWith('image/'));

        // Добавляем не-изображения в содержимое
        otherFiles.forEach(file => {
          messageContent += `
            <a href="#!" class="file-message-preview">
              <div class="file-message-icon">
                <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="40" height="40" rx="20" fill="#999999"/>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M22 30H18C14.229 30 12.343 30 11.172 28.828C10.001 27.656 10 25.771 10 22V18C10 14.229 10 12.343 11.172 11.172C12.344 10.001 14.239 10 18.03 10C18.636 10 19.121 10 19.53 10.017C19.5167 10.097 19.51 10.1783 19.51 10.261L19.5 13.095C19.5 14.192 19.5 15.162 19.605 15.943C19.719 16.79 19.98 17.637 20.672 18.329C21.362 19.019 22.21 19.281 23.057 19.395C23.838 19.5 24.808 19.5 25.905 19.5H29.957C30 20.034 30 20.69 30 21.563V22C30 25.771 30 27.657 28.828 28.828C27.656 29.999 25.771 30 22 30Z" fill="#F5F5F5"/>
                <path d="M27.352 15.6166L23.392 12.0536C22.265 11.0386 21.702 10.5306 21.009 10.2656L21 12.9996C21 15.3566 21 16.5356 21.732 17.2676C22.464 17.9996 23.643 17.9996 26 17.9996H29.58C29.218 17.2956 28.568 16.7116 27.352 15.6166Z" fill="#F5F5F5"/>
                </svg>
              </div>
              <div class="file-message-info">
                <div class="file-message-name">${file.name}</div>
                <div class="file-message-subtitle">File</div>
              </div>
            </a>
          `;
        });

        // Если нет изображений, создаем сообщение сразу
        if (imageFiles.length === 0) {
          createMessage(messageContent, getCurrentTime(), '_read', '_right');
          return;
        }

        // Загружаем изображения и создаем сообщение
        let loadedImages = 0;
        let imageContents = [];

        imageFiles.forEach((file, index) => {
          let reader = new FileReader();
          reader.onload = function(e) {
            imageContents[index] = `<div class="message-image"><img src="${e.target.result}" style="max-width: 254px; max-height: 200px;"></div>`;
            loadedImages++;

            // Когда все изображения загружены, создаем сообщение
            if (loadedImages === imageFiles.length) {
              // Добавляем изображения к содержимому
              imageContents.forEach(imgContent => {
                messageContent += imgContent;
              });
              createMessage(messageContent, getCurrentTime(), '_read', '_right');
            }
          };
          reader.readAsDataURL(file);
        });
      }

      function createMessage(content, time, status = '_unread', className = ''){
        let template = document.querySelector('#template-chat-message');
        let clone = template.content.cloneNode(true);

        let message = clone.querySelector('.user__chat-message');
        let cloneContent = message.querySelector('.user__chat-message-text');
        let meta = message.querySelector('.user__chat-meta');
        let metaTime = meta.querySelector('.user__chat-meta-time');
        let metaStatus = meta.querySelector('.user__chat-meta-status');

        cloneContent.innerHTML = content;
        message.classList.add(className);
        metaTime.innerHTML = time;
        metaStatus.classList.add(status);


        // Добавляем сообщение и скроллим вниз
        let chatMessages = document.getElementById('chat-messages');
        chatMessages.appendChild(clone);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
      function getCurrentTime() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        return `${hours}:${minutes}`;
      }
      function receiveChatMessage(event) {
          let data = JSON.parse(event.data); // если сервер шлёт JSON
          createMessage(event.data.message, event.data.time, '_unread', '_left');
      }
      function addMessageWithImage(form, file) {
        let reader = new FileReader();

        reader.onload = function(e) {
          let img = `<img src="${e.target.result}" style="max-width: 254px; max-height: 200px;">`;
          createMessage(img, getCurrentTime(), '_read', '_right');
        };

        reader.readAsDataURL(file);
      }

      function addMessageWithFile(form, file) {
        let filePreview = `
          <a href="#!" class="file-message-preview">
            <div class="file-message-info">
              <div class="file-message-name">${file.name}</div>
              <div class="file-message-subtitle">File</d
            </div>
          </a>
        `;

        createMessage(filePreview, getCurrentTime(), '_read', '_right');
      }

      function showPreview(form, files) {
        let previewContainer = form.querySelector('.file-preview-container');
        const fileInput = form.querySelector('input[type="file"]');
        if (!fileInput) return; // На всякий случай

        // Обновляем пользовательский список файлов в input
        fileInput._selectedFiles = files;
        // Обновляем и само свойство files input, чтобы изменения вступили в силу при submit
        updateInputFiles(fileInput, files);

        if (!previewContainer) {
          previewContainer = document.createElement('div');
          previewContainer.className = 'file-preview-container';
          form.insertBefore(previewContainer, form.querySelector('.user__chat-fields'));
          document.querySelector('#user__chat').classList.add('_with-files');
        }
        let previewHtml = '<div class="preview-list">';
        files.forEach((file, index) => {
          // Используем уникальный идентификатор или индекс из списка files
          const dataIndex = index;
          if (file.type.startsWith('image/')) {
            previewHtml += `
              <div class="preview-item preview-item_img" data-file-internal-index="${dataIndex}">
                <div class="preview-image-wrapper">
                  <img src="" alt="Preview" class="preview-image" data-file-internal-index="${dataIndex}">
                </div>
                <div class="preview-info">
                  <div class="preview-filename">${file.name}</div>
                </div>
                <button type="button" class="preview-remove" onclick="removePreviewItem(this, ${dataIndex})">
                  <svg width="9" height="9" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M7.712 1.712C7.73989 1.68411 7.76202 1.65099 7.77711 1.61455C7.79221 1.5781 7.79998 1.53904 7.79998 1.4996C7.79998 1.46015 7.79221 1.42109 7.77711 1.38465C7.76202 1.3482 7.73989 1.31509 7.712 1.2872C7.6841 1.2593 7.65099 1.23718 7.61455 1.22208C7.5781 1.20699 7.53904 1.19922 7.4996 1.19922C7.46015 1.19922 7.42109 1.20699 7.38465 1.22208C7.3482 1.23718 7.31509 1.2593 7.2872 1.2872L4.4996 4.0754L1.712 1.2872C1.68411 1.2593 1.65099 1.23718 1.61455 1.22208C1.5781 1.20699 1.53904 1.19922 1.4996 1.19922C1.46015 1.19922 1.42109 1.20699 1.38465 1.22208C1.3482 1.23718 1.31509 1.2593 1.2872 1.2872C1.2593 1.31509 1.23718 1.3482 1.22208 1.38465C1.20699 1.42109 1.19922 1.46015 1.19922 1.4996C1.19922 1.53904 1.20699 1.5781 1.22208 1.61455C1.23718 1.65099 1.2593 1.68411 1.2872 1.712L4.0754 4.4996L1.2872 7.2872C1.23087 7.34353 1.19922 7.41993 1.19922 7.4996C1.19922 7.57926 1.23087 7.65567 1.2872 7.712C1.34353 7.76833 1.41993 7.79998 1.4996 7.79998C1.57926 7.79998 1.65567 7.76833 1.712 7.712L4.4996 4.9238L7.2872 7.712C7.34353 7.76833 7.41993 7.79998 7.4996 7.79998C7.57926 7.79998 7.65567 7.76833 7.712 7.712C7.76833 7.65567 7.79998 7.57926 7.79998 7.4996C7.79998 7.41993 7.76833 7.34353 7.712 7.2872L4.9238 4.4996L7.712 1.712Z" fill="#1B1B1C"/>
                  </svg>
                </button>
              </div>
            `;
          } else {
            previewHtml += `
              <div class="preview-item preview-item_file" data-file-internal-index="${dataIndex}">
                <div class="preview-info">
                  <div class="preview-filename">${file.name}</div>
                  <div class="preview-subtitle">File</div>
                </div>
                <button type="button" class="preview-remove" onclick="removePreviewItem(this, ${dataIndex})">
                  <svg width="9" height="9" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M7.712 1.712C7.73989 1.68411 7.76202 1.65099 7.77711 1.61455C7.79221 1.5781 7.79998 1.53904 7.79998 1.4996C7.79998 1.46015 7.79221 1.42109 7.77711 1.38465C7.76202 1.3482 7.73989 1.31509 7.712 1.2872C7.6841 1.2593 7.65099 1.23718 7.61455 1.22208C7.5781 1.20699 7.53904 1.19922 7.4996 1.19922C7.46015 1.19922 7.42109 1.20699 7.38465 1.22208C7.3482 1.23718 7.31509 1.2593 7.2872 1.2872L4.4996 4.0754L1.712 1.2872C1.68411 1.2593 1.65099 1.23718 1.61455 1.22208C1.5781 1.20699 1.53904 1.19922 1.4996 1.19922C1.46015 1.19922 1.42109 1.20699 1.38465 1.22208C1.3482 1.23718 1.31509 1.2593 1.2872 1.2872C1.2593 1.31509 1.23718 1.3482 1.22208 1.38465C1.20699 1.42109 1.19922 1.46015 1.19922 1.4996C1.19922 1.53904 1.20699 1.5781 1.22208 1.61455C1.23718 1.65099 1.2593 1.68411 1.2872 1.712L4.0754 4.4996L1.2872 7.2872C1.23087 7.34353 1.19922 7.41993 1.19922 7.4996C1.19922 7.57926 1.23087 7.65567 1.2872 7.712C1.34353 7.76833 1.41993 7.79998 1.4996 7.79998C1.57926 7.79998 1.65567 7.76833 1.712 7.712L4.4996 4.9238L7.2872 7.712C7.34353 7.76833 7.41993 7.79998 7.4996 7.79998C7.57926 7.79998 7.65567 7.76833 7.712 7.712C7.76833 7.65567 7.79998 7.57926 7.79998 7.4996C7.79998 7.41993 7.76833 7.34353 7.712 7.2872L4.9238 4.4996L7.712 1.712Z" fill="#1B1B1C"/>
                  </svg>
                </button>
              </div>
            `;
          }
        });
        previewHtml += '</div>';
        previewContainer.innerHTML = previewHtml;
        // Загружаем изображения для превью
        files.forEach((file, index) => {
          if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
              // Используем data-file-internal-index для поиска
              const img = previewContainer.querySelector(`.preview-image[data-file-internal-index="${index}"]`);
              if (img) {
                img.src = e.target.result;
              }
            };
            reader.readAsDataURL(file);
          }
        });
      }

      function removePreviewItem(button, indexToRemove) {
        const previewItem = button.closest('.preview-item');
        const form = button.closest('form');
        const fileInput = form.querySelector('input[type="file"]');

        if (fileInput && fileInput._selectedFiles) {
            // Создаем новый список файлов, исключая файл по indexToRemove
            const newFileList = fileInput._selectedFiles.filter((_, index) => index !== indexToRemove);
            // Обновляем пользовательский список и сам input.files
            fileInput._selectedFiles = newFileList;
            updateInputFiles(fileInput, newFileList);

             // Обновляем превью с новым списком
             showPreview(form, newFileList); // Это перерисует превью с правильными индексами

             // Проверяем, остались ли еще превью (после обновления)
             const remainingItems = form.querySelectorAll('.preview-item');
             if (remainingItems.length === 0) {
               clearPreview(form); // Это очистит контейнер и класс
             }
        } else {
            // Если каким-то образом _selectedFiles нет, просто удаляем элемент DOM
            // и проверяем на пустоту
            if(previewItem) previewItem.remove();
            const remainingItemsCheck = form.querySelectorAll('.preview-item');
            if (remainingItemsCheck.length === 0) {
               clearPreview(form);
            }
        }
      }

      function clearPreview(form) {
        const previewContainer = form.querySelector('.file-preview-container');
        const fileInput = form.querySelector('input[type="file"]');
        if (previewContainer) {
          previewContainer.remove();
          document.querySelector('#user__chat').classList.remove('_with-files');
        }
        // Очищаем список файлов и сам input
        if (fileInput) {
            fileInput._selectedFiles = [];
            // Очищаем input.files. Простое присваивание пустого массива не работает,
            // нужно использовать DataTransfer.
            const dataTransfer = new DataTransfer();
            fileInput.files = dataTransfer.files;
            // Или альтернативно, можно просто сбросить value, если файлы управляются только через _selectedFiles
            // fileInput.value = '';
        }
      }

      function updateInputFiles(fileInput, fileList) {
          const dataTransfer = new DataTransfer();
          fileList.forEach(file => dataTransfer.items.add(file));
          fileInput.files = dataTransfer.files;
      }


      // --- Drag and Drop функциональность ---
      function initDragAndDrop() {
        const chatBottomArea = document.querySelector('#user__chat .user__chat-content');


        // Проверим, есть ли уже drop zone, чтобы не дублировать
        if (chatBottomArea && !chatBottomArea.querySelector('.chat-drop-zone')) {
          const chatForm = chatBottomArea.closest('.user__chat-right').querySelector('form'); // Нам нужна форма для доступа к input и preview
          const fileInput = chatForm ? chatForm.querySelector('input[type="file"]') : null;

          console.log(chatForm);

          if (!fileInput) {
            console.warn('Input file not found for Drag and Drop initialization.');
            return; // Если нет input, инициализация бессмысленна
          }

          // Создадим элемент для визуальной обратной связи при перетаскивании
          const dropZone = document.createElement('div');
          dropZone.className = 'chat-drop-zone';
          dropZone.innerHTML = `
            <div class="chat-drop-zone__content">
              <div class="chat-drop-zone__content-inner">
                  <div class="chat-drop-zone__content-title">Drop files here</div>
                  <svg width="41" height="40" viewBox="0 0 41 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <rect x="0.5" width="40" height="40" rx="20" fill="#FF8D21"/>
                  <g clip-path="url(#clip0_2190_9695)">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M14 12C13.4696 12 12.9609 12.2107 12.5858 12.5858C12.2107 12.9609 12 13.4696 12 14V26C12 26.5304 12.2107 27.0391 12.5858 27.4142C12.9609 27.7893 13.4696 28 14 28H20.29C19.9028 26.703 19.8998 25.3216 20.2816 24.0231C20.6633 22.7245 21.4134 21.5644 22.4409 20.6834C23.4684 19.8023 24.7293 19.2381 26.0709 19.0589C27.4125 18.8798 28.7773 19.0934 30 19.674V17C30 16.4696 29.7893 15.9609 29.4142 15.5858C29.0391 15.2107 28.5304 15 28 15H22.07C21.7408 15 21.4167 14.9188 21.1264 14.7636C20.8362 14.6083 20.5887 14.3838 20.406 14.11L19.594 12.89C19.4113 12.6162 19.1638 12.3917 18.8736 12.2364C18.5833 12.0812 18.2592 12 17.93 12H14Z" fill="#F5F5F5"/>
                  <path d="M20.29 28V29C20.4456 28.9999 20.5991 28.9635 20.7382 28.8937C20.8773 28.8238 20.9982 28.7225 21.0912 28.5977C21.1842 28.4729 21.2468 28.3281 21.2741 28.1749C21.3013 28.0217 21.2924 27.8642 21.248 27.715L20.29 28ZM30 19.674L29.57 20.577C29.7224 20.6496 29.8908 20.6824 30.0593 20.6724C30.2279 20.6624 30.3912 20.6099 30.5339 20.5197C30.6767 20.4295 30.7943 20.3047 30.8758 20.1568C30.9573 20.009 31 19.8428 31 19.674H30ZM13 14C13 13.7348 13.1054 13.4804 13.2929 13.2929C13.4804 13.1054 13.7348 13 14 13V11C13.2044 11 12.4413 11.3161 11.8787 11.8787C11.3161 12.4413 11 13.2044 11 14H13ZM13 26V14H11V26H13ZM14 27C13.7348 27 13.4804 26.8946 13.2929 26.7071C13.1054 26.5196 13 26.2652 13 26H11C11 26.7956 11.3161 27.5587 11.8787 28.1213C12.4413 28.6839 13.2044 29 14 29V27ZM20.29 27H14V29H20.29V27ZM21.248 27.715C21.0828 27.1583 20.9992 26.5807 21 26H19C19 26.793 19.116 27.56 19.331 28.285L21.248 27.715ZM21 26C21 24.4087 21.6321 22.8826 22.7574 21.7574C23.8826 20.6321 25.4087 20 27 20V18C24.8783 18 22.8434 18.8429 21.3431 20.3431C19.8429 21.8434 19 23.8783 19 26H21ZM27 20C27.889 19.9983 28.7671 20.1954 29.57 20.577L30.43 18.77C29.3579 18.2622 28.1863 17.9992 27 18V20ZM29 17V19.674H31V17H29ZM28 16C28.2652 16 28.5196 16.1054 28.7071 16.2929C28.8946 16.4804 29 16.7348 29 17H31C31 16.2044 30.6839 15.4413 30.1213 14.8787C29.5587 14.3161 28.7956 14 28 14V16ZM22.07 16H28V14H22.07V16ZM19.574 14.664C19.8479 15.0749 20.2191 15.4119 20.6545 15.6449C21.0899 15.878 21.5761 16 22.07 16V14C21.9054 14 21.7434 13.9594 21.5982 13.8818C21.4531 13.8042 21.3293 13.6919 21.238 13.555L19.574 14.664ZM18.762 13.445L19.574 14.664L21.238 13.555L20.426 12.335L18.762 13.445ZM17.93 13C18.0946 13 18.2566 13.0406 18.4018 13.1182C18.5469 13.1958 18.6707 13.3081 18.762 13.445L20.426 12.335C20.152 11.9243 19.7808 11.5875 19.3453 11.3546C18.9099 11.1217 18.4238 10.9999 17.93 11V13ZM14 13H17.93V11H14V13Z" fill="#F5F5F5"/>
                  <path d="M27 23V26M27 26V29M27 26H24M27 26H30" stroke="#F5F5F5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </g>
                  <defs>
                  <clipPath id="clip0_2190_9695">
                  <rect width="24" height="24" fill="white" transform="translate(8.5 8)"/>
                  </clipPath>
                  </defs>
                  </svg>
              </div>
            </div>
          `;

          // Вставим drop zone внутрь .user__chat-bottom
          chatBottomArea.style.position = 'relative'; // Убедимся, что родитель позиционированный
          chatBottomArea.appendChild(dropZone);

          let dragCounter = 0; // Счетчик для корректной работы с вложенными элементами

          // Функция для обработки файлов из drag and drop
          function handleDroppedFiles(files) {
            if (files.length > 0 && chatForm) { // Убедимся, что форма существует
                // Используем существующую логику показа превью
                showPreview(chatForm, Array.from(files));
                // Обновляем оригинальный input, чтобы файлы отправлялись при submit
                const dataTransfer = new DataTransfer();
                for (let i = 0; i < files.length; i++) {
                    dataTransfer.items.add(files[i]);
                }
                fileInput.files = dataTransfer.files;
            }
          }

          // Предотвращаем стандартное поведение браузера
          function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
          }

          // Подсветка при перетаскивании
          function highlight(e) {
            dragCounter++;
            if (dragCounter === 1) { // Показываем только при первом входе в зону
              dropZone.style.opacity = '1';
            }
          }

          function unhighlight(e) {
            dragCounter--;
            if (dragCounter <= 0) { // Скрываем, когда окончательно вышли (<= на всякий случай)
              dragCounter = 0; // Сбросим, если вдруг ушло в минус
              dropZone.style.opacity = '0';
            }
          }

          // Обработка сброшенных файлов
          function handleDrop(e) {
            dragCounter = 0; // Сбросим счетчик
            dropZone.style.opacity = '0';

            let dt = e.dataTransfer;
            let files = dt.files;

            handleDroppedFiles(files);
          }

          // --- Назначение обработчиков ---

          // Предотвращаем стандартное поведение браузера на всей области чата или лучше на самой drop zone area?
          // Лучше на самой области, куда добавляем drop zone, и на document на всякий случай
          ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            chatBottomArea.addEventListener(eventName, preventDefaults, false);
            // Также на document, чтобы избежать редиректа, если курсор выйдет за пределы области быстро
            document.addEventListener(eventName, preventDefaults, false);
          });

          // Подсветка при перетаскивании
          ['dragenter', 'dragover'].forEach(eventName => {
            chatBottomArea.addEventListener(eventName, highlight, false);
          });

          ['dragleave', 'drop'].forEach(eventName => {
            chatBottomArea.addEventListener(eventName, unhighlight, false);
          });

          // Обработка сброшенных файлов
          chatBottomArea.addEventListener('drop', handleDrop, false);

          // --- Конец назначения обработчиков ---

          console.log('Drag and Drop initialized for chat area');
        } else if(chatBottomArea) {
            console.log('Drag and Drop already initialized for this chat area');
        } else {
            console.log('Chat area not found for Drag and Drop initialization');
        }
      }
      // --- Конец Drag and Drop функциональность ---



      // Инициализируем обработчики файлов и Drag and Drop при первой загрузке
      // (маловероятно, что #user__chat уже есть, но на всякий случай)
      initEventFiles();
      initDragAndDrop(); // Попробуем инициализировать, если HTML уже есть

      document.body.addEventListener('htmx:afterSettle', function(evt) {
        if (document.querySelector('#user__chat') || document.querySelector('.user__chat-bottom')) {
          // Переинициализируем обработчики файлов для новых input'ов
          initEventFiles();
          // Переинициализируем Drag and Drop для новых областей
          initDragAndDrop();
        }
      });

      window.sendMessage = sendMessage;
      window.removePreviewItem = removePreviewItem;
      window.createMessage = createMessage;
      window.getCurrentTime = getCurrentTime;
      window.receiveChatMessage = receiveChatMessage;
      window.addMessageWithImage = addMessageWithImage;
      window.addMessageWithImage = addMessageWithImage;
      window.showPreview = showPreview;
      window.removePreviewItem = removePreviewItem;
      window.clearPreview = clearPreview;
      window.initEventFiles = initEventFiles;
      window.initDragAndDrop = initDragAndDrop;
    });
