// vite.config.js
import { defineConfig } from "file:///D:/server/2025/laragon/www/yas-tuning/node_modules/vite/dist/node/index.js";
import pug from "file:///D:/server/2025/laragon/www/yas-tuning/node_modules/vite-plugin-pug/dist/index.js";
import autoprefixer from "file:///D:/server/2025/laragon/www/yas-tuning/node_modules/autoprefixer/lib/autoprefixer.js";
import { ViteImageOptimizer } from "file:///D:/server/2025/laragon/www/yas-tuning/node_modules/vite-plugin-image-optimizer/dist/index.mjs";
import { resolve } from "path";
import { readdirSync, existsSync, copyFileSync, unlinkSync, rmSync } from "fs";
import process from "process";
import commonjs from "file:///D:/server/2025/laragon/www/yas-tuning/node_modules/@rollup/plugin-commonjs/dist/es/index.js";
function getHTMLPages() {
  const htmlDir = "src/html";
  const pages = {};
  if (existsSync(htmlDir)) {
    const htmlFiles = readdirSync(htmlDir).filter(
      (file) => file.endsWith(".html")
    );
    htmlFiles.forEach((file) => {
      const pageName = file.replace(".html", "");
      const htmlPath = resolve(process.cwd(), `${htmlDir}/${file}`);
      pages[pageName] = htmlPath;
    });
  }
  return pages;
}
function getJSEntries() {
  const entries = {};
  const jsDir = "src/js";
  if (existsSync(jsDir)) {
    const jsFiles = readdirSync(jsDir).filter((file) => file.endsWith(".js"));
    jsFiles.forEach((file) => {
      const name = file.replace(".js", "");
      entries[`js/${name}`] = resolve(process.cwd(), `${jsDir}/${file}`);
    });
  }
  const libsDir = "src/js/libs";
  if (existsSync(libsDir)) {
    const libFiles = readdirSync(libsDir).filter(
      (file) => file.endsWith(".js")
    );
    libFiles.forEach((file) => {
      const name = file.replace(".js", "");
      entries[`libs/${name}`] = resolve(process.cwd(), `${libsDir}/${file}`);
    });
  }
  const pagesDir = "src/js/pages";
  if (existsSync(pagesDir)) {
    let scanDir = function(dir, baseEntry = "") {
      const items = readdirSync(dir, { withFileTypes: true });
      items.forEach((item) => {
        if (item.isDirectory()) {
          scanDir(`${dir}/${item.name}`, `${baseEntry}${item.name}/`);
        } else if (item.name.endsWith(".js")) {
          const name = item.name.replace(".js", "");
          entries[`pages/${baseEntry}${name}`] = resolve(
            process.cwd(),
            `${dir}/${item.name}`
          );
        }
      });
    };
    scanDir(pagesDir);
  }
  return entries;
}
function getSCSSEntries() {
  const entries = {};
  if (existsSync("src/scss/main.scss")) {
    entries["css/main"] = resolve(process.cwd(), "src/scss/main.scss");
  }
  const pagesDir = "src/scss/pages";
  if (existsSync(pagesDir)) {
    const scssFiles = readdirSync(pagesDir).filter(
      (file) => file.endsWith(".scss")
    );
    scssFiles.forEach((file) => {
      const name = file.replace(".scss", "");
      entries[`css/${name}`] = resolve(process.cwd(), `${pagesDir}/${file}`);
    });
  }
  const libsDir = "src/scss/libs";
  if (existsSync(libsDir)) {
    const libFiles = readdirSync(libsDir).filter(
      (file) => file.endsWith(".scss")
    );
    libFiles.forEach((file) => {
      const name = file.replace(".scss", "");
      entries[`css/libs/${name}`] = resolve(
        process.cwd(),
        `${libsDir}/${file}`
      );
    });
  }
  const blocksDir = "src/scss/blocks";
  if (existsSync(blocksDir)) {
    let scanBlocksDir = function(dir, baseEntry = "") {
      const items = readdirSync(dir, { withFileTypes: true });
      items.forEach((item) => {
        if (item.isDirectory()) {
          scanBlocksDir(`${dir}/${item.name}`, `${baseEntry}${item.name}/`);
        } else if (item.name.endsWith(".scss")) {
          const name = item.name.replace(".scss", "");
          const entryKey = `css/blocks/${baseEntry}${name}`;
          const entryPath = resolve(process.cwd(), `${dir}/${item.name}`);
          entries[entryKey] = entryPath;
        }
      });
    };
    scanBlocksDir(blocksDir);
  }
  return entries;
}
var vite_config_default = defineConfig(({ command, mode }) => {
  const isDev = command === "serve" || mode === "development";
  return {
    plugins: [
      pug(
        {
          pretty: true
        },
        {
          title: "Vite App",
          isDev
        }
      ),
      // Оптимизация изображений в production
      !isDev && ViteImageOptimizer({
        jpg: {
          quality: 90,
          progressive: true
        },
        jpeg: {
          quality: 90,
          progressive: true
        },
        png: {
          quality: 90,
          compressionLevel: 9
        },
        webp: {
          quality: 85,
          effort: 4
        },
        avif: {
          quality: 80,
          effort: 4
        },
        svg: {
          plugins: [
            { name: "removeViewBox", active: false },
            { name: "removeDimensions", active: true },
            { name: "removeComments", active: true },
            { name: "removeUselessStrokeAndFill", active: true }
          ]
        }
      }),
      // Кастомный плагин для перемещения HTML файлов в корень build
      {
        name: "move-html-to-root",
        writeBundle() {
          const buildDir = "build";
          const htmlDir = `${buildDir}/src/html`;
          if (existsSync(htmlDir)) {
            const htmlFiles = readdirSync(htmlDir).filter(
              (file) => file.endsWith(".html")
            );
            htmlFiles.forEach((file) => {
              const srcPath = `${htmlDir}/${file}`;
              const destPath = `${buildDir}/${file}`;
              copyFileSync(srcPath, destPath);
              unlinkSync(srcPath);
            });
            try {
              rmSync(`${buildDir}/src/html`, { recursive: true, force: true });
              rmSync(`${buildDir}/src`, { recursive: true, force: true });
            } catch (e) {
            }
          }
        }
      },
      // Плагин для принудительного сохранения CSS блоков
      {
        name: "preserve-css-blocks",
        generateBundle(options, bundle) {
          const scssEntries = getSCSSEntries();
          Object.keys(scssEntries).forEach((entryKey) => {
            if (entryKey.includes("blocks/")) {
              const expectedCssName = `${entryKey}.css`;
              const hasCorrespondingCss = Object.keys(bundle).some(
                (fileName) => fileName === expectedCssName || fileName.includes(entryKey)
              );
              if (!hasCorrespondingCss) {
                console.warn(`\u26A0\uFE0F  Missing CSS for block entry: ${entryKey}`);
              }
            }
          });
          Object.keys(bundle).forEach((fileName) => {
            const file = bundle[fileName];
            if (file.type === "chunk" && (file.facadeModuleId?.endsWith(".scss") || fileName.includes("css/blocks/") || file.code && file.code.trim().length < 100 && (file.code.includes("import") === false || file.code === ""))) {
              console.log(`\u{1F5D1}\uFE0F  Removing empty CSS JS file: ${fileName}`);
              delete bundle[fileName];
            }
          });
        }
      },
      // assetConverter(),
      commonjs()
    ].filter(Boolean),
    css: {
      preprocessorOptions: {
        scss: {
          api: "modern-compiler",
          silenceDeprecations: ["legacy-js-api"]
        }
      },
      postcss: {
        plugins: !isDev && [autoprefixer()]
      }
    },
    build: {
      target: "es2015",
      cssTarget: "chrome80",
      outDir: "build",
      sourcemap: false,
      rollupOptions: {
        input: {
          ...getHTMLPages(),
          ...getJSEntries(),
          ...getSCSSEntries()
        },
        output: {
          entryFileNames: (chunkInfo) => {
            if (chunkInfo.isEntry && chunkInfo.facadeModuleId?.includes(".html")) {
              return "[name].html";
            }
            if (chunkInfo.name.startsWith("js/")) {
              return "[name].js";
            }
            return "js/[name].js";
          },
          chunkFileNames: "js/[name]-[hash].js",
          assetFileNames: (assetInfo) => {
            if (assetInfo.name?.endsWith(".css")) {
              const scssEntries = getSCSSEntries();
              if (assetInfo.originalFileNames) {
                for (const originalName of assetInfo.originalFileNames) {
                  const normalizedOrig = originalName.replace(/\\/g, "/");
                  for (const [entryKey, entryPath] of Object.entries(
                    scssEntries
                  )) {
                    const normalizedEntry = entryPath.replace(/\\/g, "/");
                    if (normalizedOrig.includes(normalizedEntry) || normalizedEntry.includes(normalizedOrig)) {
                      return `${entryKey}.css`;
                    }
                  }
                }
              }
              for (const [entryKey, entryPath] of Object.entries(scssEntries)) {
                const entryFileName = entryKey.split("/").pop();
                const assetFileName = assetInfo.name.replace(".css", "");
                if (assetFileName === entryFileName) {
                  return `${entryKey}.css`;
                }
              }
              const fileName = assetInfo.name.split("/").pop().replace(/\.[^/.]+$/, "");
              return `css/${fileName}.css`;
            }
            return "assets/[name]-[hash][extname]";
          },
          globals: {
            // Определяем глобальные переменные для избежания конфликтов
          }
        }
      },
      minify: "terser",
      terserOptions: {
        compress: {
          drop_console: true,
          drop_debugger: true,
          pure_funcs: ["console.log", "console.info", "console.debug"]
        },
        mangle: {
          // Безопасный mangling для избежания конфликтов
          reserved: ["$", "jQuery", "window", "document"],
          properties: false
        },
        format: {
          comments: false
        }
      }
    },
    server: {
      port: 3e3,
      open: true
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
