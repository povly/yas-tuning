import { readdirSync, existsSync, mkdirSync, statSync } from 'fs';
import { join, extname, basename, dirname, relative } from 'path';
import sharp from 'sharp';
import { fileURLToPath } from 'url';
import { dirname as pathDirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = pathDirname(__filename);

const SUPPORTED_FORMATS = [
  '.jpg',
  '.jpeg',
  '.png',
  '.webp',
  '.tiff',
  '.gif',
  '.bmp',
];
const srcDir = 'src/images';
const outputDir = 'public/images';

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const targetPath = args[0]; // –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–ª–∏ —Ñ–∞–π–ª—É

async function ensureDir(dirPath) {
  if (!existsSync(dirPath)) {
    mkdirSync(dirPath, { recursive: true });
  }
}

async function convertImage(inputPath, outputDir, filename) {
  const baseName = basename(filename, extname(filename));
  const relativePath = relative(srcDir, dirname(inputPath));
  const targetDir = join(outputDir, relativePath);

  await ensureDir(targetDir);

  const outputPaths = {
    avif: join(targetDir, `${baseName}.avif`),
    webp: join(targetDir, `${baseName}.webp`),
    original: join(targetDir, filename),
  };

  try {
    const image = sharp(inputPath);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ AVIF (–ª—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ)
    await image
      .clone()
      .avif({
        quality: 80,
        effort: 4,
        chromaSubsampling: '4:2:0',
      })
      .toFile(outputPaths.avif);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP (—à–∏—Ä–æ–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
    await image
      .clone()
      .webp({
        quality: 85,
        effort: 4,
        method: 6,
      })
      .toFile(outputPaths.webp);

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const ext = extname(filename).toLowerCase();
    if (ext === '.jpg' || ext === '.jpeg') {
      await image
        .clone()
        .jpeg({
          quality: 90,
          progressive: true,
          mozjpeg: true,
        })
        .toFile(outputPaths.original);
    } else if (ext === '.png') {
      await image
        .clone()
        .png({
          quality: 90,
          compressionLevel: 9,
          progressive: true,
        })
        .toFile(outputPaths.original);
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      await image.clone().toFile(outputPaths.original);
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${filename}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filename}:`, error.message);
    return false;
  }
}

async function processDirectory(dirPath) {
  if (!existsSync(dirPath)) {
    console.log(
      `üìÅ –ü–∞–ø–∫–∞ ${dirPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.`
    );
    return;
  }

  const items = readdirSync(dirPath);
  let totalFiles = 0;
  let processedFiles = 0;

  for (const item of items) {
    const itemPath = join(dirPath, item);
    const stat = statSync(itemPath);

    if (stat.isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
      await processDirectory(itemPath);
    } else if (stat.isFile()) {
      const ext = extname(item).toLowerCase();
      if (SUPPORTED_FORMATS.includes(ext)) {
        totalFiles++;
        const success = await convertImage(itemPath, outputDir, item);
        if (success) processedFiles++;
      }
    }
  }

  if (totalFiles > 0) {
    console.log(
      `\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedFiles}/${totalFiles} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ${dirPath}`
    );
  }
}

async function processSpecificFile(filePath) {
  if (!existsSync(filePath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }

  const stat = statSync(filePath);
  if (!stat.isFile()) {
    console.error(`‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: ${filePath}`);
    return false;
  }

  const ext = extname(filePath).toLowerCase();
  if (!SUPPORTED_FORMATS.includes(ext)) {
    console.error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${ext}`);
    console.log(`–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${SUPPORTED_FORMATS.join(', ')}`);
    return false;
  }

  const filename = basename(filePath);
  console.log(`üñºÔ∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${filename}`);

  const success = await convertImage(filePath, outputDir, filename);
  if (success) {
    console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${filename}`);
  }

  return success;
}

async function processSpecificDirectory(dirPath) {
  if (!existsSync(dirPath)) {
    console.error(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${dirPath}`);
    return;
  }

  const stat = statSync(dirPath);
  if (!stat.isDirectory()) {
    console.error(`‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: ${dirPath}`);
    return;
  }

  console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: ${dirPath}`);
  await processDirectory(dirPath);
}

async function main() {
  console.log('üñºÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');

  await ensureDir(outputDir);

  if (targetPath) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
    if (!existsSync(targetPath)) {
      console.error(`‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${targetPath}`);
      console.log('\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('   node convert-images.js [–ø—É—Ç—å]');
      console.log(
        '   node convert-images.js src/images/photo.jpg    # –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª'
      );
      console.log(
        '   node convert-images.js src/images/gallery     # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–∞–ø–∫–∞'
      );
      console.log(
        '   node convert-images.js                        # –≤—Å—è –ø–∞–ø–∫–∞ src/images'
      );
      return;
    }

    const stat = statSync(targetPath);

    if (stat.isFile()) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
      await processSpecificFile(targetPath);
    } else if (stat.isDirectory()) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞–ø–∫—É
      await processSpecificDirectory(targetPath);
    }
  } else {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å—é –ø–∞–ø–∫—É src/images
    console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å—é –ø–∞–ø–∫—É: ${srcDir}`);
    await processDirectory(srcDir);
  }

  console.log('\n‚ú® –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${outputDir}`);
  console.log('\nüí° –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ:');
  console.log('   üì∏ .avif - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ª—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ)');
  console.log('   üåê .webp - —à–∏—Ä–æ–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
  console.log('   üîÑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)');
}

main().catch(console.error);
